{"version":3,"sources":["components/sort-type-selector.js","functions.js","pages/home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["SortTypeSelector","props","console","log","style","textAlign","type","name","checked","sortAlgorithm","onChange","SetSortAlgorithm","disabled","e","target","value","sortDirection","setSortDirection","className","timerId","GetCanvasHues","canvasRef","byLine","ByRow","canvas","current","ctx","getContext","cw","width","ch","height","imgData","getImageData","hues","i","theseHues","j","h","rgbToHsl","data","push","SortByHue","isSortRunningCallBack","pix","hasChanged","length","r","g","b","a","putImageData","clearInterval","SortByHueByRow","SortByHueByCol","InsertionSortByHueByRow","shouldBreak","key","k","InsertionSortByHueByCol","InsertionSortByHue","c","s","max","Math","min","l","d","Sort","sortfunc","interval","setSortRunning","setInterval","CancelSort","Home","useRef","useState","isSortRunning","sortSpeed","setSortSpeed","StartSort","useEffect","Container","Row","Col","Button","onClick","xs","ref","clearRect","fillStyle","random","fillRect","RandomizeCanvas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bcc1afb1.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nexport default function SortTypeSelector(props) {\r\n    console.log(' sort type-rerendered');\r\n    return (\r\n        <div style={{ textAlign: 'left' }}>\r\n            Sort Algorithm:\r\n            <ul >\r\n                <li>\r\n                    <input type='radio' name=\"SortRadio\" checked={props.sortAlgorithm === 0} onChange={() => { props.SetSortAlgorithm(0) }} />Bubble Sort\r\n                </li>\r\n                <li>\r\n                    <input type='radio' name=\"SortRadio\" checked={props.sortAlgorithm === 1} onChange={() => { props.SetSortAlgorithm(1) }} />Insertion Sort\r\n                </li>\r\n                <li>\r\n                    <input type='radio' name=\"SortRadio\" checked={props.sortAlgorithm === 2} disabled onChange={() => { props.SetSortAlgorithm(2) }} />PlaceHolder\r\n                </li>\r\n                <li>\r\n                    <input type='radio' name=\"SortRadio\" checked={props.sortAlgorithm === 3} disabled onChange={() => { props.SetSortAlgorithm(3) }} />PlaceHolder\r\n                </li>\r\n            </ul>\r\n            Sort Direction:\r\n            <ul style={{ textAlign: 'left' }} onChange={(e) => console.log(e.target)}>\r\n                <li>\r\n                    <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={props.sortDirection === 0} onChange={() => { props.setSortDirection(0) }} />By Row\r\n                </li>\r\n                <li>\r\n                    <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={props.sortDirection === 1} onChange={() => { props.setSortDirection(1) }} />By Column\r\n                </li>\r\n                <li>\r\n                    <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={props.sortDirection === 2} onChange={() => { props.setSortDirection(2) }} />Both (N^N)\r\n                </li>\r\n            </ul>\r\n            Sort By:\r\n            <ul >\r\n                <li>\r\n                    <label className=\"radio\">\r\n                        <input type='radio' name=\"SortByRadio\"  />Hue\r\n                    </label>\r\n                </li>\r\n                <li>\r\n                    <label className=\"radio\">\r\n                        <input type='radio' name=\"SortByRadio\" disabled />Proximity\r\n                    </label>\r\n                </li>\r\n                <li>\r\n                    <label className=\"radio\">\r\n\r\n                        <input type='radio' name=\"SortByRadio\" disabled />RGB\r\n                    </label>\r\n                </li>\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import {\r\n    bigIntLiteral\r\n} from \"@babel/types\";\r\n\r\nvar timerId = null;\r\n\r\nfunction GetCanvasHues(canvasRef, byLine = false, ByRow = true) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let hues = [];\r\n    if (!byLine) {\r\n        for (let i = 0; i < cw; i++) {\r\n            for (let j = 0; j < ch; j++) {\r\n                // Get RGB data\r\n                let r = imgData.data[4 * (i * ch + j) + 0]\r\n                let g = imgData.data[4 * (i * ch + j) + 1]\r\n                let b = imgData.data[4 * (i * ch + j) + 2]\r\n                // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                // console.log(r,g,b);\r\n                // Get HSV from RGB\r\n                let hsv = rgbToHsl([r, g, b]);\r\n                let h = hsv.h;\r\n                // let s = hsv.s;\r\n                // let l = hsv.l;\r\n\r\n                // Store hue\r\n                hues.push(h);\r\n            }\r\n        }\r\n    } else {\r\n        if (ByRow) {\r\n\r\n            for (let i = 0; i < cw; i++) {\r\n                let theseHues = [];\r\n                for (let j = 0; j < ch; j++) {\r\n                    // Get RGB data\r\n                    let r = imgData.data[4 * (i * ch + j) + 0]\r\n                    let g = imgData.data[4 * (i * ch + j) + 1]\r\n                    let b = imgData.data[4 * (i * ch + j) + 2]\r\n                    // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                    // Get HSV from RGB\r\n                    let hsv = rgbToHsl([r, g, b]);\r\n                    let h = hsv.h;\r\n                    // let s = hsv.s;\r\n                    // let l = hsv.l;\r\n\r\n                    // Store hue\r\n                    theseHues.push(h);\r\n                }\r\n                hues.push(theseHues);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < cw; i++) {\r\n                let theseHues = [];\r\n                for (let j = 0; j < ch; j++) {\r\n                    // Get RGB data\r\n                    // console.log( 4* (j * cw + i));\r\n                    let r = imgData.data[4 * (j * cw + i) + 0]\r\n                    let g = imgData.data[4 * (j * cw + i) + 1]\r\n                    let b = imgData.data[4 * (j * cw + i) + 2]\r\n                    // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                    // Get HSV from RGB\r\n                    let hsv = rgbToHsl([r, g, b]);\r\n                    let h = hsv.h;\r\n                    // let s = hsv.s;\r\n                    // let l = hsv.l;\r\n\r\n                    // Store hue\r\n                    theseHues.push(h);\r\n                }\r\n                hues.push(theseHues);\r\n            }\r\n        }\r\n    }\r\n    return hues;\r\n}\r\n\r\nfunction SortByHue(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    // let pixString = JSON.stringify(pix);\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 1; i < hues.length; i++) {\r\n        if (hues[i] < hues[i - 1]) {\r\n            hasChanged = true;\r\n\r\n            // Swap pixels in actual imgData model\r\n\r\n            let r = pix[4 * i + 0];\r\n            let g = pix[4 * i + 1];\r\n            let b = pix[4 * i + 2];\r\n            let a = pix[4 * i + 3];\r\n\r\n            pix[4 * i + 0] = pix[4 * (i - 1) + 0];\r\n            pix[4 * i + 1] = pix[4 * (i - 1) + 1];\r\n            pix[4 * i + 2] = pix[4 * (i - 1) + 2];\r\n            pix[4 * i + 3] = pix[4 * (i - 1) + 3];\r\n\r\n            pix[4 * (i - 1) + 0] = r;\r\n            pix[4 * (i - 1) + 1] = g;\r\n            pix[4 * (i - 1) + 2] = b;\r\n            pix[4 * (i - 1) + 3] = a;\r\n\r\n        }\r\n\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        clearInterval(timerId);\r\n        console.log('done', timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction SortByHueByRow(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        for (let j = 1; j < hues[i].length; j++) {\r\n            if (hues[i][j] < hues[i][j - 1]) {\r\n                hasChanged = true;\r\n\r\n                // Swap pixels in actual imgData model\r\n\r\n                let r = pix[4 * (i * hues[0].length + j) + 0]\r\n                let g = pix[4 * (i * hues[0].length + j) + 1]\r\n                let b = pix[4 * (i * hues[0].length + j) + 2]\r\n                let a = pix[4 * (i * hues[0].length + j) + 3]\r\n\r\n                pix[4 * (i * hues[0].length + j) + 0] = pix[4 * (i * hues[0].length + j - 1) + 0];\r\n                pix[4 * (i * hues[0].length + j) + 1] = pix[4 * (i * hues[0].length + j - 1) + 1];\r\n                pix[4 * (i * hues[0].length + j) + 2] = pix[4 * (i * hues[0].length + j - 1) + 2];\r\n                pix[4 * (i * hues[0].length + j) + 3] = pix[4 * (i * hues[0].length + j - 1) + 3];\r\n\r\n                pix[4 * (i * hues[0].length + j - 1) + 0] = r;\r\n                pix[4 * (i * hues[0].length + j - 1) + 1] = g;\r\n                pix[4 * (i * hues[0].length + j - 1) + 2] = b;\r\n                pix[4 * (i * hues[0].length + j - 1) + 3] = a;\r\n\r\n            }\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction SortByHueByCol(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        for (let j = 1; j < hues[i].length; j++) {\r\n            if (hues[i][j] < hues[i][j - 1]) {\r\n                hasChanged = true;\r\n\r\n                // Swap pixels in actual imgData model\r\n\r\n                let r = pix[4 * (j * hues[0].length + i) + 0];\r\n                let g = pix[4 * (j * hues[0].length + i) + 1];\r\n                let b = pix[4 * (j * hues[0].length + i) + 2];\r\n                let a = pix[4 * (j * hues[0].length + i) + 3];\r\n\r\n                pix[4 * (j * hues[0].length + i) + 0] = pix[4 * ((j - 1) * hues[0].length + i) + 0];\r\n                pix[4 * (j * hues[0].length + i) + 1] = pix[4 * ((j - 1) * hues[0].length + i) + 1];\r\n                pix[4 * (j * hues[0].length + i) + 2] = pix[4 * ((j - 1) * hues[0].length + i) + 2];\r\n                pix[4 * (j * hues[0].length + i) + 3] = pix[4 * ((j - 1) * hues[0].length + i) + 3];\r\n\r\n                pix[4 * ((j - 1) * hues[0].length + i) + 0] = r;\r\n                pix[4 * ((j - 1) * hues[0].length + i) + 1] = g;\r\n                pix[4 * ((j - 1) * hues[0].length + i) + 2] = b;\r\n                pix[4 * ((j - 1) * hues[0].length + i) + 3] = a;\r\n\r\n            }\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHueByRow(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        let length = hues[i].length;\r\n        for (let j = 1; j < length; j++) {\r\n            let shouldBreak = false;\r\n            let key = hues[i][j];\r\n            let r = pix[4 * (i * hues[0].length + j) + 0];\r\n            let g = pix[4 * (i * hues[0].length + j) + 1];\r\n            let b = pix[4 * (i * hues[0].length + j) + 2];\r\n            let a = pix[4 * (i * hues[0].length + j) + 3];\r\n\r\n            let k = j - 1;\r\n            while (k >= 0 && hues[i][k] > key) {\r\n                hasChanged = true;\r\n                shouldBreak = true;\r\n                hues[i][k + 1] = hues[i][k];\r\n                pix[4 * (i * hues[0].length + k + 1) + 0] = pix[4 * (i * hues[0].length + k) + 0];\r\n                pix[4 * (i * hues[0].length + k + 1) + 1] = pix[4 * (i * hues[0].length + k) + 1];\r\n                pix[4 * (i * hues[0].length + k + 1) + 2] = pix[4 * (i * hues[0].length + k) + 2];\r\n                pix[4 * (i * hues[0].length + k + 1) + 3] = pix[4 * (i * hues[0].length + k) + 3];\r\n\r\n\r\n                k = k - 1;\r\n            }\r\n            hues[i][k + 1] = key;\r\n\r\n            pix[4 * (i * hues[0].length + k + 1) + 0] = r;\r\n            pix[4 * (i * hues[0].length + k + 1) + 1] = g;\r\n            pix[4 * (i * hues[0].length + k + 1) + 2] = b;\r\n            pix[4 * (i * hues[0].length + k + 1) + 3] = a;\r\n            if (shouldBreak)\r\n                break;\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHueByCol(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        let length = hues.length;\r\n        for (let j = 1; j < length; j++) {\r\n            let shouldBreak = false;\r\n            let key = hues[j][i];\r\n            let r = pix[4 * (j * hues.length + i) + 0];\r\n            let g = pix[4 * (j * hues.length + i) + 1];\r\n            let b = pix[4 * (j * hues.length + i) + 2];\r\n            let a = pix[4 * (j * hues.length + i) + 3];\r\n\r\n            let k = j - 1;\r\n            while (k >= 0 && hues[k][i] > key) {\r\n                hasChanged = true;\r\n                shouldBreak = true;\r\n                hues[k + 1][i] = hues[k][i];\r\n                pix[4 * ((k + 1) * hues.length + i) + 0] = pix[4 * (k * hues.length + i) + 0];\r\n                pix[4 * ((k + 1) * hues.length + i) + 1] = pix[4 * (k * hues.length + i) + 1];\r\n                pix[4 * ((k + 1) * hues.length + i) + 2] = pix[4 * (k * hues.length + i) + 2];\r\n                pix[4 * ((k + 1) * hues.length + i) + 3] = pix[4 * (k * hues.length + i) + 3];\r\n\r\n\r\n                k = k - 1;\r\n            }\r\n            hues[k + 1][i] = key;\r\n\r\n            pix[4 * ((k + 1) * hues.length + i) + 0] = r;\r\n            pix[4 * ((k + 1) * hues.length + i) + 1] = g;\r\n            pix[4 * ((k + 1) * hues.length + i) + 2] = b;\r\n            pix[4 * ((k + 1) * hues.length + i) + 3] = a;\r\n            if (shouldBreak)\r\n                break;\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHue(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 1; i < hues.length; i++) {\r\n            let shouldBreak = false;\r\n            let key = hues[i];\r\n            let r = pix[4 * (i) + 0];\r\n            let g = pix[4 * (i) + 1];\r\n            let b = pix[4 * (i) + 2];\r\n            let a = pix[4 * (i) + 3];\r\n\r\n            let k = i - 1;\r\n            while (k >= 0 && hues[k] > key) {\r\n                hasChanged = true;\r\n                shouldBreak = true;\r\n                hues[k + 1] = hues[k];\r\n                pix[4 * ((k + 1) ) + 0] = pix[4 * (k) + 0];\r\n                pix[4 * ((k + 1) ) + 1] = pix[4 * (k) + 1];\r\n                pix[4 * ((k + 1) ) + 2] = pix[4 * (k) + 2];\r\n                pix[4 * ((k + 1) ) + 3] = pix[4 * (k) + 3];\r\n\r\n\r\n                k = k - 1;\r\n            }\r\n            hues[k + 1] = key;\r\n\r\n            pix[4 * ((k + 1) ) + 0] = r;\r\n            pix[4 * ((k + 1) ) + 1] = g;\r\n            pix[4 * ((k + 1) ) + 2] = b;\r\n            pix[4 * ((k + 1) ) + 3] = a;\r\n            if (shouldBreak)\r\n                break;\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n// gets an array of rgb colors  => ([r,g,b])\r\nfunction rgbToHsl(c) {\r\n    var r = c[0] / 255,\r\n        g = c[1] / 255,\r\n        b = c[2] / 255;\r\n    var max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    var h, s, l = (max + min) / 2;\r\n\r\n    if (max === min) {\r\n        h = s = 0;\r\n        // achromatic\r\n    } else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h * 360,\r\n        s: s * 100,\r\n        l: l * 100\r\n    };\r\n}\r\n\r\nfunction RandomizeCanvas(canvasRef) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    for (let height = canvas.height, i = 0; i < height; i++) {\r\n        for (let width = canvas.width, j = 0; j < width; j++) {\r\n            ctx.fillStyle = `hsla(${Math.random() * 360}, 100%, 50%, 1)`;\r\n            // ctx.fillStyle =`hsla(${Math.random() * 360}, ${Math.random()*100}%, ${Math.random()*100}%, ${Math.random()})`\r\n            ctx.fillRect(i, j, 1, 1)\r\n        }\r\n    }\r\n}\r\n\r\nfunction Sort(sortfunc, interval, canvasRef, setSortRunning) {\r\n    // console.log('rest is:');\r\n    // console.log(...rest);\r\n    timerId = setInterval(sortfunc, interval, canvasRef, setSortRunning);\r\n    setSortRunning(true);\r\n    console.log(timerId);\r\n}\r\n\r\nfunction CancelSort(setSortRunning) {\r\n    if (timerId) {\r\n        setSortRunning(false);\r\n        clearInterval(timerId);\r\n    }\r\n}\r\nexport {\r\n    SortByHue,\r\n    SortByHueByRow,\r\n    SortByHueByCol,\r\n    InsertionSortByHueByRow,\r\n    InsertionSortByHue,\r\n    InsertionSortByHueByCol,\r\n    Sort,\r\n    RandomizeCanvas,\r\n    CancelSort\r\n};","import React, { useRef, useState, useEffect } from 'react';\r\nimport './home.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SortTypeSelector from '../components/sort-type-selector';\r\nimport { SortByHue, SortByHueByRow, Sort, RandomizeCanvas, CancelSort, SortByHueByCol, InsertionSortByHueByRow, InsertionSortByHueByCol, InsertionSortByHue } from '../functions'\r\nfunction Home() {\r\n    const canvasRef = useRef(null);\r\n    var colorArray = [];\r\n    // const [sortType, setSortType] = useState(BubbleSort);\r\n    const [isSortRunning, setSortRunning] = useState(false);\r\n    const [sortSpeed, setSortSpeed] = useState(0);//from 0 to 100, 0 is fastest\r\n    const [sortDirection, setSortDirection] = useState(0);//0-Row,1-Col,2-Both\r\n    const [sortAlgorithm, SetSortAlgorithm] = useState(0);//0-bubblesort,1-insertion\r\n    console.log('rerender?', isSortRunning);\r\n    /////////////////////////////////\r\n\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        console.log('rerender, issortrunning=', isSortRunning, 'sortdirection:', sortDirection, 'sortalgorithm:', sortAlgorithm);\r\n    });\r\n    function StartSort() {\r\n\r\n        switch (sortAlgorithm) {\r\n            case 0:\r\n                switch (sortDirection) {\r\n                    case 0:\r\n                        Sort(SortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 1:\r\n                        Sort(SortByHueByCol, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 2:\r\n                        Sort(SortByHue, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    default:\r\n                        Sort(SortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                }\r\n                break;\r\n            case 1:\r\n                switch (sortDirection) {\r\n                    case 0:\r\n                        Sort(InsertionSortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 1:\r\n                        Sort(InsertionSortByHueByCol, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 2:\r\n                        Sort(InsertionSortByHue, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    default:\r\n                        Sort(InsertionSortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button onClick={StartSort}>Sort</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button disabled={isSortRunning} onClick={() => console.log()}>\r\n                            Sort by else\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={8}>\r\n                        <canvas ref={canvasRef} height={450} width={450}></canvas>\r\n                    </Col>\r\n                    <SortTypeSelector setSortDirection={setSortDirection} SetSortAlgorithm={SetSortAlgorithm} sortDirection={sortDirection} sortAlgorithm={sortAlgorithm} />\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button onClick={() => {\r\n                            RandomizeCanvas(canvasRef);\r\n                            // // http://www.deepdiveintel.com/wp-content/uploads/2013/09/Owl-Eye-art-300x300.jpg\r\n                            // var ctx = canvasRef.current.getContext('2d');\r\n                            // var img = new Image();\r\n                            // img.onload = function () {\r\n                            //     ctx.drawImage(img, 0, 0); // Or at whatever offset you like\r\n                            // };\r\n                            // img.src = 'Owl-Eye-art-300x300.jpg';\r\n                        }}>Randomize canvas</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <div>\r\n                            <input type=\"range\" min=\"0\" max=\"100\" value={100 - sortSpeed} onChange={(e) => {\r\n                                console.log(100 - e.target.value);\r\n                                setSortSpeed(100 - e.target.value);\r\n                                if (isSortRunning) {\r\n                                    CancelSort(setSortRunning);\r\n                                    StartSort();\r\n                                }\r\n                            }} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isSortRunning ? (<Button onClick={() => CancelSort(setSortRunning)}>Cancel Sort</Button>) : (<></>)}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}