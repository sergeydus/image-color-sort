{"version":3,"sources":["logo.svg","functions.js","components/sort-type-selector.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","timerId","GetCanvasHues","canvasRef","byLine","ByRow","canvas","current","ctx","getContext","cw","width","ch","height","imgData","getImageData","hues","i","theseHues","j","h","rgbToHsl","data","push","console","log","SortByHue","isSortRunningCallBack","pix","hasChanged","length","r","g","b","a","putImageData","clearInterval","SortByHueByRow","SortByHueByCol","InsertionSortByHueByRow","shouldBreak","key","k","InsertionSortByHueByCol","InsertionSortByHue","c","s","max","Math","min","l","d","Sort","sortfunc","interval","setSortRunning","setInterval","CancelSort","SortTypeSelector","props","useState","isSortRunning","sortSpeed","setSortSpeed","sortDirection","setSortDirection","sortAlgorithm","SetSortAlgorithm","StartSort","useEffect","className","type","name","checked","onChange","disabled","e","target","value","Button","variant","onClick","style","clearRect","fillStyle","random","fillRect","RandomizeCanvas","id","url","window","webkitURL","URL","createObjectURL","files","img","Image","src","onload","img_width","img_height","SetHeight","SetWidth","drawImage","Home","useRef","Container","Row","Col","sm","md","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77bcad30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","var timerId = null;\r\n\r\nfunction GetCanvasHues(canvasRef, byLine = false, ByRow = true) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let hues = [];\r\n    if (!byLine) {\r\n        for (let i = 0; i < cw; i++) {\r\n            for (let j = 0; j < ch; j++) {\r\n                // Get RGB data\r\n                let r = imgData.data[4 * (i * ch + j) + 0]\r\n                let g = imgData.data[4 * (i * ch + j) + 1]\r\n                let b = imgData.data[4 * (i * ch + j) + 2]\r\n                // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                // console.log(r,g,b);\r\n                // Get HSV from RGB\r\n                let hsv = rgbToHsl([r, g, b]);\r\n                let h = hsv.h;\r\n                // let s = hsv.s;\r\n                // let l = hsv.l;\r\n\r\n                // Store hue\r\n                hues.push(h);\r\n            }\r\n        }\r\n    } else {\r\n        if (ByRow) {\r\n\r\n            for (let i = 0; i < ch; i++) {\r\n                let theseHues = [];\r\n                for (let j = 0; j < cw; j++) {\r\n                    // Get RGB data\r\n                    let r = imgData.data[4 * (i * cw + j) + 0]\r\n                    let g = imgData.data[4 * (i * cw + j) + 1]\r\n                    let b = imgData.data[4 * (i * cw + j) + 2]\r\n                    // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                    // Get HSV from RGB\r\n                    let hsv = rgbToHsl([r, g, b]);\r\n                    let h = hsv.h;\r\n                    // let s = hsv.s;\r\n                    // let l = hsv.l;\r\n\r\n                    // Store hue\r\n                    theseHues.push(h);\r\n                }\r\n                hues.push(theseHues);\r\n            }\r\n            console.log(hues);\r\n        } else {\r\n            for (let i = 0; i < cw; i++) {\r\n                let theseHues = [];\r\n                for (let j = 0; j < ch; j++) {\r\n                    // Get RGB data\r\n                    // console.log( 4* (j * cw + i));\r\n                    let r = imgData.data[4 * (j * cw + i) + 0];\r\n                    let g = imgData.data[4 * (j * cw + i) + 1];\r\n                    let b = imgData.data[4 * (j * cw + i) + 2];\r\n                    // let a = imgData.data[4 * (i * ch + j) + 3]\r\n                    // Get HSV from RGB\r\n                    let hsv = rgbToHsl([r, g, b]);\r\n                    let h = hsv.h;\r\n                    // let s = hsv.s;\r\n                    // let l = hsv.l;\r\n\r\n                    // Store hue\r\n                    theseHues.push(h);\r\n                }\r\n                hues.push(theseHues);\r\n            }\r\n        }\r\n    }\r\n    return hues;\r\n}\r\n\r\nfunction SortByHue(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    // let pixString = JSON.stringify(pix);\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 1; i < hues.length; i++) {\r\n        if (hues[i] < hues[i - 1]) {\r\n            hasChanged = true;\r\n\r\n            // Swap pixels in actual imgData model\r\n\r\n            let r = pix[4 * i + 0];\r\n            let g = pix[4 * i + 1];\r\n            let b = pix[4 * i + 2];\r\n            let a = pix[4 * i + 3];\r\n\r\n            pix[4 * i + 0] = pix[4 * (i - 1) + 0];\r\n            pix[4 * i + 1] = pix[4 * (i - 1) + 1];\r\n            pix[4 * i + 2] = pix[4 * (i - 1) + 2];\r\n            pix[4 * i + 3] = pix[4 * (i - 1) + 3];\r\n\r\n            pix[4 * (i - 1) + 0] = r;\r\n            pix[4 * (i - 1) + 1] = g;\r\n            pix[4 * (i - 1) + 2] = b;\r\n            pix[4 * (i - 1) + 3] = a;\r\n\r\n        }\r\n\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        clearInterval(timerId);\r\n        console.log('done', timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction SortByHueSKIP(canvasRef, isSortRunningCallBack) {\r\n    console.log('SKIP');\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    // let pixString = JSON.stringify(pix);\r\n    let hues = [];\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let j = 0; j < hues.length; j++)\r\n        for (let i = 1; i < hues.length; i++) {\r\n            if (hues[i] < hues[i - 1]) {\r\n\r\n                // Swap pixels in actual imgData model\r\n                let temp=hues[i];\r\n                hues[i] = hues[i - 1];\r\n                hues[i-1]=temp;\r\n                let r = pix[4 * i + 0];\r\n                let g = pix[4 * i + 1];\r\n                let b = pix[4 * i + 2];\r\n                let a = pix[4 * i + 3];\r\n\r\n                pix[4 * i + 0] = pix[4 * (i - 1) + 0];\r\n                pix[4 * i + 1] = pix[4 * (i - 1) + 1];\r\n                pix[4 * i + 2] = pix[4 * (i - 1) + 2];\r\n                pix[4 * i + 3] = pix[4 * (i - 1) + 3];\r\n\r\n                pix[4 * (i - 1) + 0] = r;\r\n                pix[4 * (i - 1) + 1] = g;\r\n                pix[4 * (i - 1) + 2] = b;\r\n                pix[4 * (i - 1) + 3] = a;\r\n\r\n            }\r\n\r\n        }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    clearInterval(timerId);\r\n    isSortRunningCallBack(false);\r\n\r\n}\r\n\r\nfunction SortByHueByRow(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        for (let j = 1; j < hues[i].length; j++) {\r\n            if (hues[i][j] < hues[i][j - 1]) {\r\n                hasChanged = true;\r\n\r\n                // Swap pixels in actual imgData model\r\n\r\n                let r = pix[4 * (i * hues[0].length + j) + 0]\r\n                let g = pix[4 * (i * hues[0].length + j) + 1]\r\n                let b = pix[4 * (i * hues[0].length + j) + 2]\r\n                let a = pix[4 * (i * hues[0].length + j) + 3]\r\n\r\n                pix[4 * (i * hues[0].length + j) + 0] = pix[4 * (i * hues[0].length + j - 1) + 0];\r\n                pix[4 * (i * hues[0].length + j) + 1] = pix[4 * (i * hues[0].length + j - 1) + 1];\r\n                pix[4 * (i * hues[0].length + j) + 2] = pix[4 * (i * hues[0].length + j - 1) + 2];\r\n                pix[4 * (i * hues[0].length + j) + 3] = pix[4 * (i * hues[0].length + j - 1) + 3];\r\n\r\n                pix[4 * (i * hues[0].length + j - 1) + 0] = r;\r\n                pix[4 * (i * hues[0].length + j - 1) + 1] = g;\r\n                pix[4 * (i * hues[0].length + j - 1) + 2] = b;\r\n                pix[4 * (i * hues[0].length + j - 1) + 3] = a;\r\n\r\n            }\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction SortByHueByCol(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true, false);\r\n    // 'Bubble sort' hues in image data\r\n    console.log(hues);\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        for (let j = 1; j < hues[i].length; j++) {\r\n            if (hues[i][j] < hues[i][j - 1]) {\r\n                hasChanged = true;\r\n\r\n                // Swap pixels in actual imgData model\r\n\r\n                let r = pix[4 * (j * hues.length + i) + 0];\r\n                let g = pix[4 * (j * hues.length + i) + 1];\r\n                let b = pix[4 * (j * hues.length + i) + 2];\r\n                let a = pix[4 * (j * hues.length + i) + 3];\r\n\r\n                pix[4 * (j *hues.length+ i) + 0] = pix[4 * ((j - 1) * hues.length + i) + 0];\r\n                pix[4 * (j *hues.length+ i) + 1] = pix[4 * ((j - 1) * hues.length + i) + 1];\r\n                pix[4 * (j *hues.length+ i) + 2] = pix[4 * ((j - 1) * hues.length + i) + 2];\r\n                pix[4 * (j *hues.length+ i) + 3] = pix[4 * ((j - 1) * hues.length + i) + 3];\r\n\r\n                pix[4 * ((j - 1) * hues.length + i) + 0] = r;\r\n                pix[4 * ((j - 1) * hues.length + i) + 1] = g;\r\n                pix[4 * ((j - 1) * hues.length + i) + 2] = b;\r\n                pix[4 * ((j - 1) * hues.length + i) + 3] = a;\r\n\r\n            }\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHueByRow(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        // console.log(i);\r\n        let length = hues[i].length;\r\n        for (let j = 1; j < length; j++) {\r\n            let shouldBreak = false;\r\n            let key = hues[i][j];\r\n            let r = pix[4 * (i * hues[0].length + j) + 0];\r\n            let g = pix[4 * (i * hues[0].length + j) + 1];\r\n            let b = pix[4 * (i * hues[0].length + j) + 2];\r\n            let a = pix[4 * (i * hues[0].length + j) + 3];\r\n\r\n            let k = j - 1;\r\n            while (k >= 0 && hues[i][k] > key) {\r\n                hasChanged = true;\r\n                shouldBreak = true;\r\n                hues[i][k + 1] = hues[i][k];\r\n                pix[4 * (i * hues[0].length + k + 1) + 0] = pix[4 * (i * hues[0].length + k) + 0];\r\n                pix[4 * (i * hues[0].length + k + 1) + 1] = pix[4 * (i * hues[0].length + k) + 1];\r\n                pix[4 * (i * hues[0].length + k + 1) + 2] = pix[4 * (i * hues[0].length + k) + 2];\r\n                pix[4 * (i * hues[0].length + k + 1) + 3] = pix[4 * (i * hues[0].length + k) + 3];\r\n\r\n\r\n                k = k - 1;\r\n            }\r\n            hues[i][k + 1] = key;\r\n\r\n            pix[4 * (i * hues[0].length + k + 1) + 0] = r;\r\n            pix[4 * (i * hues[0].length + k + 1) + 1] = g;\r\n            pix[4 * (i * hues[0].length + k + 1) + 2] = b;\r\n            pix[4 * (i * hues[0].length + k + 1) + 3] = a;\r\n            if (shouldBreak)\r\n                break;\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHueByCol(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, true,false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 0; i < hues.length; i++) {\r\n        console.log(hues.length,hues[0].length+'!@#@!');\r\n        let length = hues[0].length;\r\n        for (let j = 1; j < length; j++) {\r\n            let shouldBreak = false;\r\n            let key = hues[i][j];\r\n            let r = pix[4 * (j * hues.length + i) + 0];\r\n            let g = pix[4 * (j * hues.length + i) + 1];\r\n            let b = pix[4 * (j * hues.length + i) + 2];\r\n            let a = pix[4 * (j * hues.length + i) + 3];\r\n\r\n            let k = j - 1;\r\n            while (k >= 0 && hues[i][k] > key) {\r\n                hasChanged = true;\r\n                shouldBreak = true;\r\n                hues[i][k + 1] = hues[i][k];\r\n                pix[4 * ((k + 1) * hues.length + i) + 0] = pix[4 * (k * hues.length + i) + 0];\r\n                pix[4 * ((k + 1) * hues.length + i) + 1] = pix[4 * (k * hues.length + i) + 1];\r\n                pix[4 * ((k + 1) * hues.length + i) + 2] = pix[4 * (k * hues.length + i) + 2];\r\n                pix[4 * ((k + 1) * hues.length + i) + 3] = pix[4 * (k * hues.length + i) + 3];\r\n\r\n\r\n                k = k - 1;\r\n            }\r\n            hues[i][k + 1] = key;\r\n\r\n            pix[4 * ((k + 1) * hues.length + i) + 0] = r;\r\n            pix[4 * ((k + 1) * hues.length + i) + 1] = g;\r\n            pix[4 * ((k + 1) * hues.length + i) + 2] = b;\r\n            pix[4 * ((k + 1) * hues.length + i) + 3] = a;\r\n            if (shouldBreak)\r\n                break;\r\n        }\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n\r\nfunction InsertionSortByHue(canvasRef, isSortRunningCallBack) {\r\n    const canvas = canvasRef.current;\r\n    let cw = canvas.width,\r\n        ch = canvas.height;\r\n    const ctx = canvas.getContext('2d');\r\n    let imgData = ctx.getImageData(0, 0, cw, ch);\r\n    let pix = imgData.data;\r\n    let hues = [];\r\n    let hasChanged = false;\r\n    // Get all hues\r\n    hues = GetCanvasHues(canvasRef, false);\r\n    // 'Bubble sort' hues in image data\r\n    for (let i = 1; i < hues.length; i++) {\r\n        let shouldBreak = false;\r\n        let key = hues[i];\r\n        let r = pix[4 * (i) + 0];\r\n        let g = pix[4 * (i) + 1];\r\n        let b = pix[4 * (i) + 2];\r\n        let a = pix[4 * (i) + 3];\r\n\r\n        let k = i - 1;\r\n        while (k >= 0 && hues[k] > key) {\r\n            hasChanged = true;\r\n            shouldBreak = true;\r\n            hues[k + 1] = hues[k];\r\n            pix[4 * ((k + 1)) + 0] = pix[4 * (k) + 0];\r\n            pix[4 * ((k + 1)) + 1] = pix[4 * (k) + 1];\r\n            pix[4 * ((k + 1)) + 2] = pix[4 * (k) + 2];\r\n            pix[4 * ((k + 1)) + 3] = pix[4 * (k) + 3];\r\n\r\n\r\n            k = k - 1;\r\n        }\r\n        hues[k + 1] = key;\r\n\r\n        pix[4 * ((k + 1)) + 0] = r;\r\n        pix[4 * ((k + 1)) + 1] = g;\r\n        pix[4 * ((k + 1)) + 2] = b;\r\n        pix[4 * ((k + 1)) + 3] = a;\r\n        if (shouldBreak)\r\n            break;\r\n    }\r\n    // Put image data back to canvas\r\n    ctx.putImageData(imgData, 0, 0);\r\n    if (!hasChanged) {\r\n        console.log('done', timerId, 'calling callback');\r\n        clearInterval(timerId);\r\n        isSortRunningCallBack(false);\r\n    }\r\n}\r\n// gets an array of rgb colors  => ([r,g,b])\r\nfunction rgbToHsl(c) {\r\n    var r = c[0] / 255,\r\n        g = c[1] / 255,\r\n        b = c[2] / 255;\r\n    var max = Math.max(r, g, b),\r\n        min = Math.min(r, g, b);\r\n    var h, s, l = (max + min) / 2;\r\n\r\n    if (max === min) {\r\n        h = s = 0;\r\n        // achromatic\r\n    } else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h * 360,\r\n        s: s * 100,\r\n        l: l * 100\r\n    };\r\n}\r\n\r\nfunction RandomizeCanvas(canvasRef) {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    for (let height = canvas.height, i = 0; i < height; i++) {\r\n        for (let width = canvas.width, j = 0; j < width; j++) {\r\n            ctx.fillStyle = `hsla(${Math.random() * 360}, 100%, 50%, 1)`;\r\n            // ctx.fillStyle =`hsla(${Math.random() * 360}, ${Math.random()*100}%, ${Math.random()*100}%, ${Math.random()})`\r\n            ctx.fillRect(j, i, 1, 1);\r\n        }\r\n    }\r\n    console.log(canvas.width,canvas.height);\r\n}\r\n\r\nfunction Sort(sortfunc, interval, canvasRef, setSortRunning) {\r\n    // console.log('rest is:');\r\n    // console.log(...rest);\r\n    timerId = setInterval(sortfunc, interval, canvasRef, setSortRunning);\r\n    setSortRunning(true);\r\n    console.log(timerId);\r\n}\r\n\r\nfunction CancelSort(setSortRunning) {\r\n    if (timerId) {\r\n        setSortRunning(false);\r\n        clearInterval(timerId);\r\n    }\r\n}\r\nexport {\r\n    SortByHueSKIP,\r\n    SortByHue,\r\n    SortByHueByRow,\r\n    SortByHueByCol,\r\n    InsertionSortByHueByRow,\r\n    InsertionSortByHue,\r\n    InsertionSortByHueByCol,\r\n    Sort,\r\n    RandomizeCanvas,\r\n    CancelSort\r\n};","import React, { useRef, useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../pages/home.css'\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { SortByHue, SortByHueByRow, Sort, RandomizeCanvas, CancelSort, SortByHueByCol, InsertionSortByHueByRow, InsertionSortByHueByCol, InsertionSortByHue, SortByHueSKIP } from '../functions'\r\n\r\nexport default function SortTypeSelector(props) {\r\n    let canvasRef = props.canvasRef;\r\n    console.log(canvasRef);\r\n    console.log(' sort type-rerendered');\r\n    const [isSortRunning, setSortRunning] = useState(false);\r\n    const [localImage, setlocalImage] = useState(null);\r\n    const [sortSpeed, setSortSpeed] = useState(0);//from 0 to 100, 0 is fastest\r\n    const [sortDirection, setSortDirection] = useState(0);//0-Row,1-Col,2-Both\r\n    const [sortAlgorithm, SetSortAlgorithm] = useState(0);//0-bubblesort,1-insertion\r\n    console.log('rerender?', isSortRunning);\r\n    /////////////////////////////////\r\n\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        console.log('rerender, issortrunning=', isSortRunning, 'sortdirection:', sortDirection, 'sortalgorithm:', sortAlgorithm);\r\n    });\r\n    function StartSort() {\r\n\r\n        switch (sortAlgorithm) {\r\n            case 0:\r\n                switch (sortDirection) {\r\n                    case 0:\r\n                        Sort(SortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 1:\r\n                        Sort(SortByHueByCol, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 2:\r\n                        Sort(SortByHue, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    default:\r\n                        Sort(SortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                }\r\n                break;\r\n            case 1:\r\n                switch (sortDirection) {\r\n                    case 0:\r\n                        Sort(InsertionSortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 1:\r\n                        Sort(InsertionSortByHueByCol, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    case 2:\r\n                        Sort(InsertionSortByHue, sortSpeed, canvasRef, setSortRunning);\r\n                        break;\r\n                    default:\r\n                        Sort(InsertionSortByHueByRow, sortSpeed, canvasRef, setSortRunning);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"input-container\">\r\n            <div className=\"input-container-item\">\r\n\r\n                <p>Sort Algorithm:</p>\r\n                <ul >\r\n                    <li>\r\n                        <input type='radio' name=\"SortRadio\" checked={sortAlgorithm === 0} onChange={() => { SetSortAlgorithm(0) }} />Bubble Sort\r\n                </li>\r\n                    <li>\r\n                        <input type='radio' name=\"SortRadio\" checked={sortAlgorithm === 1} onChange={() => { SetSortAlgorithm(1) }} />Insertion Sort\r\n                </li>\r\n                    <li>\r\n                        <input type='radio' name=\"SortRadio\" checked={sortAlgorithm === 2} disabled onChange={() => { SetSortAlgorithm(2) }} />PlaceHolder\r\n                </li>\r\n                    <li>\r\n                        <input type='radio' name=\"SortRadio\" checked={sortAlgorithm === 3} disabled onChange={() => { SetSortAlgorithm(3) }} />PlaceHolder\r\n                </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"input-container-item\">\r\n\r\n                Sort Direction:\r\n            <ul onChange={(e) => console.log(e.target)}>\r\n                    <li>\r\n                        <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={sortDirection === 0} onChange={() => { setSortDirection(0) }} />By Row\r\n                </li>\r\n                    <li>\r\n                        <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={sortDirection === 1} onChange={() => { setSortDirection(1) }} />By Column\r\n                </li>\r\n                    <li>\r\n                        <input type='radio' name=\"SortTypeRadio\" value=\"\" checked={sortDirection === 2} onChange={() => { setSortDirection(2) }} />Top to Bottom (takes a while)\r\n                </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"input-container-item\">\r\n\r\n                Sort By:\r\n            <ul >\r\n                    <li>\r\n                        <label className=\"radio\">\r\n                            <input type='radio' name=\"SortByRadio\" />Hue\r\n                    </label>\r\n                    </li>\r\n                    <li>\r\n                        <label className=\"radio\">\r\n                            <input type='radio' name=\"SortByRadio\" disabled />Proximity\r\n                    </label>\r\n                    </li>\r\n                    <li>\r\n                        <label className=\"radio\">\r\n\r\n                            <input type='radio' name=\"SortByRadio\" disabled />RGB\r\n                    </label>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <p>Sort speed:{100 - sortSpeed}</p>\r\n            <div className=\"input-container-item\">\r\n                <input type=\"range\" min=\"0\" max=\"100\" value={100 - sortSpeed} onChange={(e) => {\r\n                    console.log(100 - e.target.value);\r\n                    setSortSpeed(100 - e.target.value);\r\n                    if (isSortRunning) {\r\n                        CancelSort(setSortRunning);\r\n                        StartSort();\r\n                    }\r\n                }} />\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <Button variant=\"success\" className='btn-block' onClick={StartSort}>Sort Image</Button>\r\n                {isSortRunning ? (\r\n                    <div>\r\n                        <Button style={{ width: '50%' }} onClick={() => CancelSort(setSortRunning)}>Cancel</Button>\r\n                        <Button style={{ width: '50%' }} onClick={() => CancelSort(setSortRunning)}>Skip</Button>\r\n                    </div>\r\n                ) : (<></>)}\r\n                <Button variant=\"warning\" className='btn-block' onClick={() => RandomizeCanvas(canvasRef)}>Randomize Canvas</Button>\r\n                {/* <Button type='file' variant='outline-primary' className='btn-block'>Upload Image</Button> */}\r\n                <input type=\"file\" id=\"file_input\" onChange={(e) => {\r\n                    const canvas = props.canvasRef.current;\r\n                    const ctx = canvas.getContext('2d');\r\n                    var URL = window.webkitURL || window.URL;\r\n                    var url = URL.createObjectURL(e.target.files[0]);\r\n                    var img = new Image();\r\n                    img.src = url;\r\n                    img.onload = function () {\r\n                        let img_width = img.width;\r\n                        let img_height = img.height;\r\n                        props.SetHeight(img_height);\r\n                        props.SetWidth(img_width);\r\n                        ctx.drawImage(img, 0, 0, img_width, img_height);\r\n\r\n                    }\r\n                }}></input>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport './home.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SortTypeSelector from '../components/sort-type-selector';\r\nimport { SortByHue, SortByHueByRow, Sort, RandomizeCanvas, CancelSort, SortByHueByCol, InsertionSortByHueByRow, InsertionSortByHueByCol, InsertionSortByHue } from '../functions'\r\nfunction Home() {\r\n    const canvasRef = useRef(null);\r\n    const [height, SetHeight] = useState(300);\r\n    const [width, SetWidth] = useState(300);\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n\r\n                </Row>\r\n                <Row>\r\n                    <Col sm={12} md={8}>\r\n                        <canvas ref={canvasRef} height={height} width={width}></canvas>\r\n                    </Col>\r\n                    <Col sm={12} md={4}>\r\n                        <SortTypeSelector canvasRef={canvasRef} SetHeight={SetHeight} SetWidth={SetWidth} />\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}